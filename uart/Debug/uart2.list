
uart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000358c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800371c  0800371c  0000471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d0  080037d0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d8  080037d8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d8  080037d8  000047d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080037e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  0800383c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800383c  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ff8  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017da  00000000  00000000  0000f084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00010860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000692  00000000  00000000  000110f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020204  00000000  00000000  0001178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d0e  00000000  00000000  0003198e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0768  00000000  00000000  0003b69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbe04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002748  00000000  00000000  000fbe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000fe590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003704 	.word	0x08003704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003704 	.word	0x08003704

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 f942 	bl	8000830 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f80d 	bl	80005cc <HAL_InitTick>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b8:	2301      	movs	r3, #1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	e001      	b.n	80005c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005be:	f002 fabd 	bl	8002b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <HAL_InitTick+0x6c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d023      	beq.n	8000628 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <HAL_InitTick+0x70>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <HAL_InitTick+0x6c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f941 	bl	800087e <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10f      	bne.n	8000622 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d809      	bhi.n	800061c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000610:	f000 f919 	bl	8000846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <HAL_InitTick+0x74>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	e007      	b.n	800062c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e004      	b.n	800062c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e001      	b.n	800062c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004
 800063c:	20000008 	.word	0x20000008
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	20000078 	.word	0x20000078

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000078 	.word	0x20000078

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <HAL_Delay+0x44>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	@ (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	@ (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	@ 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	@ 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007fc:	d301      	bcc.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e00f      	b.n	8000822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <SysTick_Config+0x40>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	210f      	movs	r1, #15
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000810:	f7ff ff8e 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <SysTick_Config+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <SysTick_Config+0x40>)
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	e000e010 	.word	0xe000e010

08000830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff47 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000858:	f7ff ff5c 	bl	8000714 <__NVIC_GetPriorityGrouping>
 800085c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	6978      	ldr	r0, [r7, #20]
 8000864:	f7ff ff8e 	bl	8000784 <NVIC_EncodePriority>
 8000868:	4602      	mov	r2, r0
 800086a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff5d 	bl	8000730 <__NVIC_SetPriority>
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffb0 	bl	80007ec <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e148      	b.n	8000b3a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 813a 	beq.w	8000b34 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d005      	beq.n	80008d8 <HAL_GPIO_Init+0x40>
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d130      	bne.n	800093a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800090e:	2201      	movs	r2, #1
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	f003 0201 	and.w	r2, r3, #1
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	2b03      	cmp	r3, #3
 8000944:	d017      	beq.n	8000976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	2b02      	cmp	r3, #2
 8000980:	d123      	bne.n	80009ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	08da      	lsrs	r2, r3, #3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3208      	adds	r2, #8
 800098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f003 0307 	and.w	r3, r3, #7
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	08da      	lsrs	r2, r3, #3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3208      	adds	r2, #8
 80009c4:	6939      	ldr	r1, [r7, #16]
 80009c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0203 	and.w	r2, r3, #3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8094 	beq.w	8000b34 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0c:	4b52      	ldr	r3, [pc, #328]	@ (8000b58 <HAL_GPIO_Init+0x2c0>)
 8000a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a10:	4a51      	ldr	r2, [pc, #324]	@ (8000b58 <HAL_GPIO_Init+0x2c0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a18:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <HAL_GPIO_Init+0x2c0>)
 8000a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a24:	4a4d      	ldr	r2, [pc, #308]	@ (8000b5c <HAL_GPIO_Init+0x2c4>)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a4e:	d00d      	beq.n	8000a6c <HAL_GPIO_Init+0x1d4>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a43      	ldr	r2, [pc, #268]	@ (8000b60 <HAL_GPIO_Init+0x2c8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d007      	beq.n	8000a68 <HAL_GPIO_Init+0x1d0>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a42      	ldr	r2, [pc, #264]	@ (8000b64 <HAL_GPIO_Init+0x2cc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_Init+0x1cc>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e004      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a64:	2307      	movs	r3, #7
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	4093      	lsls	r3, r2
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a7e:	4937      	ldr	r1, [pc, #220]	@ (8000b5c <HAL_GPIO_Init+0x2c4>)
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a8c:	4b36      	ldr	r3, [pc, #216]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ada:	4a23      	ldr	r2, [pc, #140]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b04:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f47f aeaf 	bne.w	80008a8 <HAL_GPIO_Init+0x10>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	48000400 	.word	0x48000400
 8000b64:	48000800 	.word	0x48000800
 8000b68:	40010400 	.word	0x40010400

08000b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b82:	887a      	ldrh	r2, [r7, #2]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43d9      	mvns	r1, r3
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40007000 	.word	0x40007000

08000bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfa:	d130      	bne.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bfc:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c08:	d038      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2232      	movs	r2, #50	@ 0x32
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	0c9b      	lsrs	r3, r3, #18
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c30:	e002      	b.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c44:	d102      	bne.n	8000c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f2      	bne.n	8000c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c58:	d110      	bne.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e00f      	b.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c6a:	d007      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c74:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	431bde83 	.word	0x431bde83

08000c98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f000 bc02 	b.w	80014b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cac:	4b96      	ldr	r3, [pc, #600]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb6:	4b94      	ldr	r3, [pc, #592]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80e4 	beq.w	8000e96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d007      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x4c>
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b0c      	cmp	r3, #12
 8000cd8:	f040 808b 	bne.w	8000df2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f040 8087 	bne.w	8000df2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ce4:	4b88      	ldr	r3, [pc, #544]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <HAL_RCC_OscConfig+0x64>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e3d9      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1a      	ldr	r2, [r3, #32]
 8000d00:	4b81      	ldr	r3, [pc, #516]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <HAL_RCC_OscConfig+0x7e>
 8000d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d14:	e005      	b.n	8000d22 <HAL_RCC_OscConfig+0x8a>
 8000d16:	4b7c      	ldr	r3, [pc, #496]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d223      	bcs.n	8000d6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fd8c 	bl	8001848 <RCC_SetFlashLatencyFromMSIRange>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e3ba      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d3a:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a72      	ldr	r2, [pc, #456]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b70      	ldr	r3, [pc, #448]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	496d      	ldr	r1, [pc, #436]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d58:	4b6b      	ldr	r3, [pc, #428]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	4968      	ldr	r1, [pc, #416]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
 8000d6c:	e025      	b.n	8000dba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6e:	4b66      	ldr	r3, [pc, #408]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a65      	ldr	r2, [pc, #404]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b63      	ldr	r3, [pc, #396]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4960      	ldr	r1, [pc, #384]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	495b      	ldr	r1, [pc, #364]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d109      	bne.n	8000dba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd4c 	bl	8001848 <RCC_SetFlashLatencyFromMSIRange>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e37a      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dba:	f000 fc81 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	4b51      	ldr	r3, [pc, #324]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	4950      	ldr	r1, [pc, #320]	@ (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000dcc:	5ccb      	ldrb	r3, [r1, r3]
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8000f10 <HAL_RCC_OscConfig+0x278>)
 8000dd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dda:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <HAL_RCC_OscConfig+0x27c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbf4 	bl	80005cc <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d052      	beq.n	8000e94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	e35e      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d032      	beq.n	8000e60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dfa:	4b43      	ldr	r3, [pc, #268]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a42      	ldr	r2, [pc, #264]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fc31 	bl	800066c <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fc2d 	bl	800066c <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e347      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e20:	4b39      	ldr	r3, [pc, #228]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2c:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a35      	ldr	r2, [pc, #212]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4930      	ldr	r1, [pc, #192]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	492b      	ldr	r1, [pc, #172]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
 8000e5e:	e01a      	b.n	8000e96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e60:	4b29      	ldr	r3, [pc, #164]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a28      	ldr	r2, [pc, #160]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e66:	f023 0301 	bic.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fbfe 	bl	800066c <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e74:	f7ff fbfa 	bl	800066c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e314      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x1dc>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d073      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d005      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x21c>
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b0c      	cmp	r3, #12
 8000eac:	d10e      	bne.n	8000ecc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d10b      	bne.n	8000ecc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d063      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d15f      	bne.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e2f1      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed4:	d106      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x24c>
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e025      	b.n	8000f30 <HAL_RCC_OscConfig+0x298>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eec:	d114      	bne.n	8000f18 <HAL_RCC_OscConfig+0x280>
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a02      	ldr	r2, [pc, #8]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e013      	b.n	8000f30 <HAL_RCC_OscConfig+0x298>
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	08003754 	.word	0x08003754
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000000 	.word	0x20000000
 8000f18:	4ba0      	ldr	r3, [pc, #640]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b9d      	ldr	r3, [pc, #628]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a9c      	ldr	r2, [pc, #624]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d013      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb98 	bl	800066c <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fb94 	bl	800066c <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e2ae      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f52:	4b92      	ldr	r3, [pc, #584]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2a8>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fb84 	bl	800066c <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fb80 	bl	800066c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	@ 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e29a      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d0>
 8000f86:	e000      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d060      	beq.n	8001058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x310>
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d119      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d116      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa8:	4b7c      	ldr	r3, [pc, #496]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x328>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e277      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b76      	ldr	r3, [pc, #472]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	4973      	ldr	r1, [pc, #460]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd4:	e040      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d023      	beq.n	8001026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fde:	4b6f      	ldr	r3, [pc, #444]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb3f 	bl	800066c <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fb3b 	bl	800066c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e255      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001004:	4b65      	ldr	r3, [pc, #404]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b62      	ldr	r3, [pc, #392]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	061b      	lsls	r3, r3, #24
 800101e:	495f      	ldr	r1, [pc, #380]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
 8001024:	e018      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b5d      	ldr	r3, [pc, #372]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a5c      	ldr	r2, [pc, #368]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800102c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fb1b 	bl	800066c <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fb17 	bl	800066c <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e231      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800104c:	4b53      	ldr	r3, [pc, #332]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d03c      	beq.n	80010de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d01c      	beq.n	80010a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106c:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001072:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107c:	f7ff faf6 	bl	800066c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff faf2 	bl	800066c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e20c      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001096:	4b41      	ldr	r3, [pc, #260]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0ef      	beq.n	8001084 <HAL_RCC_OscConfig+0x3ec>
 80010a4:	e01b      	b.n	80010de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a6:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ac:	4a3b      	ldr	r2, [pc, #236]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b6:	f7ff fad9 	bl	800066c <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fad5 	bl	800066c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1ef      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010d0:	4b32      	ldr	r3, [pc, #200]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ef      	bne.n	80010be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a6 	beq.w	8001238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010f0:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10d      	bne.n	8001118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001100:	4a26      	ldr	r2, [pc, #152]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001106:	6593      	str	r3, [r2, #88]	@ 0x58
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001114:	2301      	movs	r3, #1
 8001116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d118      	bne.n	8001156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001130:	f7ff fa9c 	bl	800066c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001138:	f7ff fa98 	bl	800066c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1b2      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_RCC_OscConfig+0x4d8>
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800116e:	e029      	b.n	80011c4 <HAL_RCC_OscConfig+0x52c>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d115      	bne.n	80011a4 <HAL_RCC_OscConfig+0x50c>
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800117e:	4a07      	ldr	r2, [pc, #28]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800118e:	4a03      	ldr	r2, [pc, #12]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001198:	e014      	b.n	80011c4 <HAL_RCC_OscConfig+0x52c>
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40007000 	.word	0x40007000
 80011a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011aa:	4a99      	ldr	r2, [pc, #612]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011b4:	4b96      	ldr	r3, [pc, #600]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80011b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ba:	4a95      	ldr	r2, [pc, #596]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011cc:	f7ff fa4e 	bl	800066c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f7ff fa4a 	bl	800066c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e162      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ea:	4b89      	ldr	r3, [pc, #548]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80011ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ed      	beq.n	80011d4 <HAL_RCC_OscConfig+0x53c>
 80011f8:	e015      	b.n	8001226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff fa37 	bl	800066c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fa33 	bl	800066c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e14b      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001218:	4b7d      	ldr	r3, [pc, #500]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1ed      	bne.n	8001202 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b78      	ldr	r3, [pc, #480]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	4a77      	ldr	r2, [pc, #476]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001236:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b00      	cmp	r3, #0
 8001242:	d03c      	beq.n	80012be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01c      	beq.n	8001286 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800124c:	4b70      	ldr	r3, [pc, #448]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800124e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001252:	4a6f      	ldr	r2, [pc, #444]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fa06 	bl	800066c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001264:	f7ff fa02 	bl	800066c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e11c      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001276:	4b66      	ldr	r3, [pc, #408]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ef      	beq.n	8001264 <HAL_RCC_OscConfig+0x5cc>
 8001284:	e01b      	b.n	80012be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001286:	4b62      	ldr	r3, [pc, #392]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800128c:	4a60      	ldr	r2, [pc, #384]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff f9e9 	bl	800066c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800129e:	f7ff f9e5 	bl	800066c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0ff      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012b0:	4b57      	ldr	r3, [pc, #348]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80012b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ef      	bne.n	800129e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80f3 	beq.w	80014ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	f040 80c9 	bne.w	8001464 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0203 	and.w	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d12c      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	3b01      	subs	r3, #1
 80012f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d123      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001302:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d11b      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001312:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d113      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	3b01      	subs	r3, #1
 8001326:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d109      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d06b      	beq.n	8001418 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d062      	beq.n	800140c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001346:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0ac      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001356:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800135c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001360:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001362:	f7ff f983 	bl	800066c <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136a:	f7ff f97f 	bl	800066c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e099      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001388:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_RCC_OscConfig+0x77c>)
 800138e:	4013      	ands	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001398:	3a01      	subs	r2, #1
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013a2:	0212      	lsls	r2, r2, #8
 80013a4:	4311      	orrs	r1, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013aa:	0852      	lsrs	r2, r2, #1
 80013ac:	3a01      	subs	r2, #1
 80013ae:	0552      	lsls	r2, r2, #21
 80013b0:	4311      	orrs	r1, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013b6:	0852      	lsrs	r2, r2, #1
 80013b8:	3a01      	subs	r2, #1
 80013ba:	0652      	lsls	r2, r2, #25
 80013bc:	4311      	orrs	r1, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013c2:	06d2      	lsls	r2, r2, #27
 80013c4:	430a      	orrs	r2, r1
 80013c6:	4912      	ldr	r1, [pc, #72]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e4:	f7ff f942 	bl	800066c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f93e 	bl	800066c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e058      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <HAL_RCC_OscConfig+0x778>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800140a:	e050      	b.n	80014ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e04f      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
 8001410:	40021000 	.word	0x40021000
 8001414:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d144      	bne.n	80014ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a23      	ldr	r2, [pc, #140]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800143c:	f7ff f916 	bl	800066c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f912 	bl	800066c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e02c      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x7ac>
 8001462:	e024      	b.n	80014ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b0c      	cmp	r3, #12
 8001468:	d01f      	beq.n	80014aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 8001470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff f8f9 	bl	800066c <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff f8f5 	bl	800066c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e00f      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	4905      	ldr	r1, [pc, #20]	@ (80014b8 <HAL_RCC_OscConfig+0x820>)
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_RCC_OscConfig+0x824>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e001      	b.n	80014ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	feeefffc 	.word	0xfeeefffc

080014c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0e7      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d4:	4b75      	ldr	r3, [pc, #468]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d910      	bls.n	8001504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b72      	ldr	r3, [pc, #456]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 0207 	bic.w	r2, r3, #7
 80014ea:	4970      	ldr	r1, [pc, #448]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b6e      	ldr	r3, [pc, #440]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0cf      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d010      	beq.n	8001532 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800151c:	429a      	cmp	r2, r3
 800151e:	d908      	bls.n	8001532 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4b63      	ldr	r3, [pc, #396]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4960      	ldr	r1, [pc, #384]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d04c      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001546:	4b5a      	ldr	r3, [pc, #360]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d121      	bne.n	8001596 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0a6      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	4b54      	ldr	r3, [pc, #336]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d115      	bne.n	8001596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e09a      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001576:	4b4e      	ldr	r3, [pc, #312]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e08e      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001586:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e086      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001596:	4b46      	ldr	r3, [pc, #280]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 0203 	bic.w	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4943      	ldr	r1, [pc, #268]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a8:	f7ff f860 	bl	800066c <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b0:	f7ff f85c 	bl	800066c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e06e      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 020c 	and.w	r2, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1eb      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d208      	bcs.n	8001606 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	492b      	ldr	r1, [pc, #172]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001606:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d210      	bcs.n	8001636 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001614:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 0207 	bic.w	r2, r3, #7
 800161c:	4923      	ldr	r1, [pc, #140]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001624:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <HAL_RCC_ClockConfig+0x1ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e036      	b.n	80016a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4918      	ldr	r1, [pc, #96]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4910      	ldr	r1, [pc, #64]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001674:	f000 f824 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	490b      	ldr	r1, [pc, #44]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	4a09      	ldr	r2, [pc, #36]	@ (80016b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001692:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_ClockConfig+0x1fc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff97 	bl	80005cc <HAL_InitTick>
 800169e:	4603      	mov	r3, r0
 80016a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80016a2:	7afb      	ldrb	r3, [r7, #11]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08003754 	.word	0x08003754
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d8:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x34>
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d121      	bne.n	8001732 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d11e      	bne.n	8001732 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e005      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001710:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800171c:	4a2b      	ldr	r2, [pc, #172]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10d      	bne.n	8001748 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d102      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	e004      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d101      	bne.n	8001748 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001744:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001746:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d134      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0xa6>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d003      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0xac>
 8001764:	e005      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001768:	617b      	str	r3, [r7, #20]
      break;
 800176a:	e005      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800176e:	617b      	str	r3, [r7, #20]
      break;
 8001770:	e002      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	617b      	str	r3, [r7, #20]
      break;
 8001776:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	3301      	adds	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	fb03 f202 	mul.w	r2, r3, r2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	0e5b      	lsrs	r3, r3, #25
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	3301      	adds	r3, #1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017b8:	69bb      	ldr	r3, [r7, #24]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	@ 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	0800376c 	.word	0x0800376c
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	007a1200 	.word	0x007a1200

080017d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_RCC_GetHCLKFreq+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80017f4:	f7ff fff0 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4904      	ldr	r1, [pc, #16]	@ (8001818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000
 8001818:	08003764 	.word	0x08003764

0800181c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001820:	f7ff ffda 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	0adb      	lsrs	r3, r3, #11
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4904      	ldr	r1, [pc, #16]	@ (8001844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	08003764 	.word	0x08003764

08001848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001860:	f7ff f9b6 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 8001864:	6178      	str	r0, [r7, #20]
 8001866:	e014      	b.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	4a24      	ldr	r2, [pc, #144]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	@ 0x58
 8001874:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001880:	f7ff f9a6 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 8001884:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001898:	d10b      	bne.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b80      	cmp	r3, #128	@ 0x80
 800189e:	d919      	bls.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80018a4:	d902      	bls.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a6:	2302      	movs	r3, #2
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	e013      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e010      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b80      	cmp	r3, #128	@ 0x80
 80018b6:	d902      	bls.n	80018be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018b8:	2303      	movs	r3, #3
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e00a      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b80      	cmp	r3, #128	@ 0x80
 80018c2:	d102      	bne.n	80018ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018c4:	2302      	movs	r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	e004      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b70      	cmp	r3, #112	@ 0x70
 80018ce:	d101      	bne.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018d0:	2301      	movs	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	4909      	ldr	r1, [pc, #36]	@ (8001904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018e4:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001910:	2300      	movs	r3, #0
 8001912:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001914:	2300      	movs	r3, #0
 8001916:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001920:	2b00      	cmp	r3, #0
 8001922:	d031      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800192c:	d01a      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800192e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001932:	d814      	bhi.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001934:	2b00      	cmp	r3, #0
 8001936:	d009      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001938:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800193c:	d10f      	bne.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800193e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001948:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800194a:	e00c      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f9ce 	bl	8001cf4 <RCCEx_PLLSAI1_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800195c:	e003      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	74fb      	strb	r3, [r7, #19]
      break;
 8001962:	e000      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10b      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800196c:	4b51      	ldr	r3, [pc, #324]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001972:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197a:	494e      	ldr	r1, [pc, #312]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001982:	e001      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001984:	7cfb      	ldrb	r3, [r7, #19]
 8001986:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 809e 	beq.w	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00d      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b40      	ldr	r3, [pc, #256]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80019bc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a39      	ldr	r2, [pc, #228]	@ (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019d8:	f7fe fe48 	bl	800066c <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019de:	e009      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e0:	f7fe fe44 	bl	800066c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d902      	bls.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	74fb      	strb	r3, [r7, #19]
        break;
 80019f2:	e005      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019f4:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ef      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d15a      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a06:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01e      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d019      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a34:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a44:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a4e:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d016      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7fe fe04 	bl	800066c <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	e00b      	b.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7fe fe00 	bl	800066c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d902      	bls.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	74fb      	strb	r3, [r7, #19]
            break;
 8001a7e:	e006      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ec      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10b      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a94:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aa2:	4904      	ldr	r1, [pc, #16]	@ (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aac:	7cfb      	ldrb	r3, [r7, #19]
 8001aae:	74bb      	strb	r3, [r7, #18]
 8001ab0:	e006      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac0:	7c7b      	ldrb	r3, [r7, #17]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	4a89      	ldr	r2, [pc, #548]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00a      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ade:	4b84      	ldr	r3, [pc, #528]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae4:	f023 0203 	bic.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4980      	ldr	r1, [pc, #512]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b00:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b06:	f023 020c 	bic.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	4978      	ldr	r1, [pc, #480]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b22:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	496f      	ldr	r1, [pc, #444]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b44:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b52:	4967      	ldr	r1, [pc, #412]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b66:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b74:	495e      	ldr	r1, [pc, #376]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b88:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	4956      	ldr	r1, [pc, #344]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001baa:	4b51      	ldr	r3, [pc, #324]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	494d      	ldr	r1, [pc, #308]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d028      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bcc:	4b48      	ldr	r3, [pc, #288]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4945      	ldr	r1, [pc, #276]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bec:	4b40      	ldr	r3, [pc, #256]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bf6:	60d3      	str	r3, [r2, #12]
 8001bf8:	e011      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f872 	bl	8001cf4 <RCCEx_PLLSAI1_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d028      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c2a:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	492d      	ldr	r1, [pc, #180]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c48:	d106      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c4a:	4b29      	ldr	r3, [pc, #164]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a28      	ldr	r2, [pc, #160]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c54:	60d3      	str	r3, [r2, #12]
 8001c56:	e011      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2101      	movs	r1, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f843 	bl	8001cf4 <RCCEx_PLLSAI1_Config>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8001c78:	7cfb      	ldrb	r3, [r7, #19]
 8001c7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c96:	4916      	ldr	r1, [pc, #88]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f820 	bl	8001cf4 <RCCEx_PLLSAI1_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8001cbe:	7cfb      	ldrb	r3, [r7, #19]
 8001cc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cdc:	4904      	ldr	r1, [pc, #16]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001ce4:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d02:	4b74      	ldr	r3, [pc, #464]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d018      	beq.n	8001d40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d0e:	4b71      	ldr	r3, [pc, #452]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10d      	bne.n	8001d3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
       ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d26:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
       ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d047      	beq.n	8001dca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e044      	b.n	8001dca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d018      	beq.n	8001d7a <RCCEx_PLLSAI1_Config+0x86>
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d825      	bhi.n	8001d98 <RCCEx_PLLSAI1_Config+0xa4>
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d002      	beq.n	8001d56 <RCCEx_PLLSAI1_Config+0x62>
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d009      	beq.n	8001d68 <RCCEx_PLLSAI1_Config+0x74>
 8001d54:	e020      	b.n	8001d98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d56:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11d      	bne.n	8001d9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d66:	e01a      	b.n	8001d9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d68:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d116      	bne.n	8001da2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d78:	e013      	b.n	8001da2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d7a:	4b56      	ldr	r3, [pc, #344]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d86:	4b53      	ldr	r3, [pc, #332]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001d96:	e006      	b.n	8001da6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9c:	e004      	b.n	8001da8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e002      	b.n	8001da8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001da2:	bf00      	nop
 8001da4:	e000      	b.n	8001da8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001dae:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	4943      	ldr	r1, [pc, #268]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d17c      	bne.n	8001eca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001dd0:	4b40      	ldr	r3, [pc, #256]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fc46 	bl	800066c <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001de2:	e009      	b.n	8001df8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001de4:	f7fe fc42 	bl	800066c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d902      	bls.n	8001df8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	73fb      	strb	r3, [r7, #15]
        break;
 8001df6:	e005      	b.n	8001e04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ef      	bne.n	8001de4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d15f      	bne.n	8001eca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d110      	bne.n	8001e32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8001e18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6892      	ldr	r2, [r2, #8]
 8001e20:	0211      	lsls	r1, r2, #8
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	06d2      	lsls	r2, r2, #27
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	492a      	ldr	r1, [pc, #168]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	610b      	str	r3, [r1, #16]
 8001e30:	e027      	b.n	8001e82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d112      	bne.n	8001e5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e38:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001e40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6892      	ldr	r2, [r2, #8]
 8001e48:	0211      	lsls	r1, r2, #8
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6912      	ldr	r2, [r2, #16]
 8001e4e:	0852      	lsrs	r2, r2, #1
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0552      	lsls	r2, r2, #21
 8001e54:	430a      	orrs	r2, r1
 8001e56:	491f      	ldr	r1, [pc, #124]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	610b      	str	r3, [r1, #16]
 8001e5c:	e011      	b.n	8001e82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001e66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6892      	ldr	r2, [r2, #8]
 8001e6e:	0211      	lsls	r1, r2, #8
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6952      	ldr	r2, [r2, #20]
 8001e74:	0852      	lsrs	r2, r2, #1
 8001e76:	3a01      	subs	r2, #1
 8001e78:	0652      	lsls	r2, r2, #25
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	4915      	ldr	r1, [pc, #84]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fbed 	bl	800066c <HAL_GetTick>
 8001e92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e94:	e009      	b.n	8001eaa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e96:	f7fe fbe9 	bl	800066c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d902      	bls.n	8001eaa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	73fb      	strb	r3, [r7, #15]
          break;
 8001ea8:	e005      	b.n	8001eb6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ef      	beq.n	8001e96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4903      	ldr	r1, [pc, #12]	@ (8001ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e040      	b.n	8001f6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fe42 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	@ 0x24
 8001f04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fade 	bl	80024e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8af 	bl	8002088 <UART_SetConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e01b      	b.n	8001f6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb5d 	bl	8002624 <UART_CheckIdleState>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d177      	bne.n	800207c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_UART_Transmit+0x24>
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e070      	b.n	800207e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2221      	movs	r2, #33	@ 0x21
 8001fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001faa:	f7fe fb5f 	bl	800066c <HAL_GetTick>
 8001fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc8:	d108      	bne.n	8001fdc <HAL_UART_Transmit+0x68>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d104      	bne.n	8001fdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	e003      	b.n	8001fe4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe4:	e02f      	b.n	8002046 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fbbf 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e03b      	b.n	800207e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002018:	b292      	uxth	r2, r2
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	3302      	adds	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	e007      	b.n	8002034 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1c9      	bne.n	8001fe6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	@ 0x40
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fb89 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e005      	b.n	800207e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800208c:	b08a      	sub	sp, #40	@ 0x28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4bb4      	ldr	r3, [pc, #720]	@ (8002388 <UART_SetConfig+0x300>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4aa9      	ldr	r2, [pc, #676]	@ (800238c <UART_SetConfig+0x304>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f0:	4313      	orrs	r3, r2
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4aa0      	ldr	r2, [pc, #640]	@ (8002390 <UART_SetConfig+0x308>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d126      	bne.n	8002160 <UART_SetConfig+0xd8>
 8002112:	4ba0      	ldr	r3, [pc, #640]	@ (8002394 <UART_SetConfig+0x30c>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d81b      	bhi.n	8002158 <UART_SetConfig+0xd0>
 8002120:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <UART_SetConfig+0xa0>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	08002149 	.word	0x08002149
 8002130:	08002141 	.word	0x08002141
 8002134:	08002151 	.word	0x08002151
 8002138:	2301      	movs	r3, #1
 800213a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800213e:	e080      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002140:	2302      	movs	r3, #2
 8002142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002146:	e07c      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002148:	2304      	movs	r3, #4
 800214a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800214e:	e078      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002150:	2308      	movs	r3, #8
 8002152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002156:	e074      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002158:	2310      	movs	r3, #16
 800215a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800215e:	e070      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a8c      	ldr	r2, [pc, #560]	@ (8002398 <UART_SetConfig+0x310>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d138      	bne.n	80021dc <UART_SetConfig+0x154>
 800216a:	4b8a      	ldr	r3, [pc, #552]	@ (8002394 <UART_SetConfig+0x30c>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d82d      	bhi.n	80021d4 <UART_SetConfig+0x14c>
 8002178:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <UART_SetConfig+0xf8>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080021d5 	.word	0x080021d5
 8002188:	080021d5 	.word	0x080021d5
 800218c:	080021d5 	.word	0x080021d5
 8002190:	080021c5 	.word	0x080021c5
 8002194:	080021d5 	.word	0x080021d5
 8002198:	080021d5 	.word	0x080021d5
 800219c:	080021d5 	.word	0x080021d5
 80021a0:	080021bd 	.word	0x080021bd
 80021a4:	080021d5 	.word	0x080021d5
 80021a8:	080021d5 	.word	0x080021d5
 80021ac:	080021d5 	.word	0x080021d5
 80021b0:	080021cd 	.word	0x080021cd
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021ba:	e042      	b.n	8002242 <UART_SetConfig+0x1ba>
 80021bc:	2302      	movs	r3, #2
 80021be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021c2:	e03e      	b.n	8002242 <UART_SetConfig+0x1ba>
 80021c4:	2304      	movs	r3, #4
 80021c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021ca:	e03a      	b.n	8002242 <UART_SetConfig+0x1ba>
 80021cc:	2308      	movs	r3, #8
 80021ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021d2:	e036      	b.n	8002242 <UART_SetConfig+0x1ba>
 80021d4:	2310      	movs	r3, #16
 80021d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021da:	e032      	b.n	8002242 <UART_SetConfig+0x1ba>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6a      	ldr	r2, [pc, #424]	@ (800238c <UART_SetConfig+0x304>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12a      	bne.n	800223c <UART_SetConfig+0x1b4>
 80021e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <UART_SetConfig+0x30c>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021f4:	d01a      	beq.n	800222c <UART_SetConfig+0x1a4>
 80021f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021fa:	d81b      	bhi.n	8002234 <UART_SetConfig+0x1ac>
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002200:	d00c      	beq.n	800221c <UART_SetConfig+0x194>
 8002202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002206:	d815      	bhi.n	8002234 <UART_SetConfig+0x1ac>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <UART_SetConfig+0x18c>
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002210:	d008      	beq.n	8002224 <UART_SetConfig+0x19c>
 8002212:	e00f      	b.n	8002234 <UART_SetConfig+0x1ac>
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800221a:	e012      	b.n	8002242 <UART_SetConfig+0x1ba>
 800221c:	2302      	movs	r3, #2
 800221e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002222:	e00e      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002224:	2304      	movs	r3, #4
 8002226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800222a:	e00a      	b.n	8002242 <UART_SetConfig+0x1ba>
 800222c:	2308      	movs	r3, #8
 800222e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002232:	e006      	b.n	8002242 <UART_SetConfig+0x1ba>
 8002234:	2310      	movs	r3, #16
 8002236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800223a:	e002      	b.n	8002242 <UART_SetConfig+0x1ba>
 800223c:	2310      	movs	r3, #16
 800223e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a51      	ldr	r2, [pc, #324]	@ (800238c <UART_SetConfig+0x304>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d17a      	bne.n	8002342 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800224c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002250:	2b08      	cmp	r3, #8
 8002252:	d824      	bhi.n	800229e <UART_SetConfig+0x216>
 8002254:	a201      	add	r2, pc, #4	@ (adr r2, 800225c <UART_SetConfig+0x1d4>)
 8002256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225a:	bf00      	nop
 800225c:	08002281 	.word	0x08002281
 8002260:	0800229f 	.word	0x0800229f
 8002264:	08002289 	.word	0x08002289
 8002268:	0800229f 	.word	0x0800229f
 800226c:	0800228f 	.word	0x0800228f
 8002270:	0800229f 	.word	0x0800229f
 8002274:	0800229f 	.word	0x0800229f
 8002278:	0800229f 	.word	0x0800229f
 800227c:	08002297 	.word	0x08002297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002280:	f7ff fab6 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8002284:	61f8      	str	r0, [r7, #28]
        break;
 8002286:	e010      	b.n	80022aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002288:	4b44      	ldr	r3, [pc, #272]	@ (800239c <UART_SetConfig+0x314>)
 800228a:	61fb      	str	r3, [r7, #28]
        break;
 800228c:	e00d      	b.n	80022aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800228e:	f7ff fa17 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8002292:	61f8      	str	r0, [r7, #28]
        break;
 8002294:	e009      	b.n	80022aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229a:	61fb      	str	r3, [r7, #28]
        break;
 800229c:	e005      	b.n	80022aa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80022a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8107 	beq.w	80024c0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d305      	bcc.n	80022ce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d903      	bls.n	80022d6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80022d4:	e0f4      	b.n	80024c0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2200      	movs	r2, #0
 80022da:	461c      	mov	r4, r3
 80022dc:	4615      	mov	r5, r2
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	022b      	lsls	r3, r5, #8
 80022e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80022ec:	0222      	lsls	r2, r4, #8
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	6849      	ldr	r1, [r1, #4]
 80022f2:	0849      	lsrs	r1, r1, #1
 80022f4:	2000      	movs	r0, #0
 80022f6:	4688      	mov	r8, r1
 80022f8:	4681      	mov	r9, r0
 80022fa:	eb12 0a08 	adds.w	sl, r2, r8
 80022fe:	eb43 0b09 	adc.w	fp, r3, r9
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002310:	4650      	mov	r0, sl
 8002312:	4659      	mov	r1, fp
 8002314:	f7fd ffac 	bl	8000270 <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4613      	mov	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002326:	d308      	bcc.n	800233a <UART_SetConfig+0x2b2>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800232e:	d204      	bcs.n	800233a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e0c2      	b.n	80024c0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002340:	e0be      	b.n	80024c0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800234a:	d16a      	bne.n	8002422 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800234c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002350:	2b08      	cmp	r3, #8
 8002352:	d834      	bhi.n	80023be <UART_SetConfig+0x336>
 8002354:	a201      	add	r2, pc, #4	@ (adr r2, 800235c <UART_SetConfig+0x2d4>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	08002381 	.word	0x08002381
 8002360:	080023a1 	.word	0x080023a1
 8002364:	080023a9 	.word	0x080023a9
 8002368:	080023bf 	.word	0x080023bf
 800236c:	080023af 	.word	0x080023af
 8002370:	080023bf 	.word	0x080023bf
 8002374:	080023bf 	.word	0x080023bf
 8002378:	080023bf 	.word	0x080023bf
 800237c:	080023b7 	.word	0x080023b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002380:	f7ff fa36 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8002384:	61f8      	str	r0, [r7, #28]
        break;
 8002386:	e020      	b.n	80023ca <UART_SetConfig+0x342>
 8002388:	efff69f3 	.word	0xefff69f3
 800238c:	40008000 	.word	0x40008000
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	40004400 	.word	0x40004400
 800239c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023a0:	f7ff fa3c 	bl	800181c <HAL_RCC_GetPCLK2Freq>
 80023a4:	61f8      	str	r0, [r7, #28]
        break;
 80023a6:	e010      	b.n	80023ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023a8:	4b4c      	ldr	r3, [pc, #304]	@ (80024dc <UART_SetConfig+0x454>)
 80023aa:	61fb      	str	r3, [r7, #28]
        break;
 80023ac:	e00d      	b.n	80023ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ae:	f7ff f987 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 80023b2:	61f8      	str	r0, [r7, #28]
        break;
 80023b4:	e009      	b.n	80023ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ba:	61fb      	str	r3, [r7, #28]
        break;
 80023bc:	e005      	b.n	80023ca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80023c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d077      	beq.n	80024c0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005a      	lsls	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d916      	bls.n	800241a <UART_SetConfig+0x392>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f2:	d212      	bcs.n	800241a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f023 030f 	bic.w	r3, r3, #15
 80023fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	b29a      	uxth	r2, r3
 800240a:	8afb      	ldrh	r3, [r7, #22]
 800240c:	4313      	orrs	r3, r2
 800240e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	8afa      	ldrh	r2, [r7, #22]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	e052      	b.n	80024c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002420:	e04e      	b.n	80024c0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002422:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002426:	2b08      	cmp	r3, #8
 8002428:	d827      	bhi.n	800247a <UART_SetConfig+0x3f2>
 800242a:	a201      	add	r2, pc, #4	@ (adr r2, 8002430 <UART_SetConfig+0x3a8>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002455 	.word	0x08002455
 8002434:	0800245d 	.word	0x0800245d
 8002438:	08002465 	.word	0x08002465
 800243c:	0800247b 	.word	0x0800247b
 8002440:	0800246b 	.word	0x0800246b
 8002444:	0800247b 	.word	0x0800247b
 8002448:	0800247b 	.word	0x0800247b
 800244c:	0800247b 	.word	0x0800247b
 8002450:	08002473 	.word	0x08002473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002454:	f7ff f9cc 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8002458:	61f8      	str	r0, [r7, #28]
        break;
 800245a:	e014      	b.n	8002486 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800245c:	f7ff f9de 	bl	800181c <HAL_RCC_GetPCLK2Freq>
 8002460:	61f8      	str	r0, [r7, #28]
        break;
 8002462:	e010      	b.n	8002486 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <UART_SetConfig+0x454>)
 8002466:	61fb      	str	r3, [r7, #28]
        break;
 8002468:	e00d      	b.n	8002486 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800246a:	f7ff f929 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 800246e:	61f8      	str	r0, [r7, #28]
        break;
 8002470:	e009      	b.n	8002486 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002476:	61fb      	str	r3, [r7, #28]
        break;
 8002478:	e005      	b.n	8002486 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002484:	bf00      	nop
    }

    if (pclk != 0U)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d019      	beq.n	80024c0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	085a      	lsrs	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	441a      	add	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	d909      	bls.n	80024ba <UART_SetConfig+0x432>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d205      	bcs.n	80024ba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	e002      	b.n	80024c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80024cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3728      	adds	r7, #40	@ 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024da:	bf00      	nop
 80024dc:	00f42400 	.word	0x00f42400

080024e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01a      	beq.n	80025f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025de:	d10a      	bne.n	80025f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b098      	sub	sp, #96	@ 0x60
 8002628:	af02      	add	r7, sp, #8
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002634:	f7fe f81a 	bl	800066c <HAL_GetTick>
 8002638:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b08      	cmp	r3, #8
 8002646:	d12e      	bne.n	80026a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f88c 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d021      	beq.n	80026a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	e853 3f00 	ldrex	r3, [r3]
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002676:	653b      	str	r3, [r7, #80]	@ 0x50
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
 8002682:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002688:	e841 2300 	strex	r3, r2, [r1]
 800268c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800268e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e6      	bne.n	8002662 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e062      	b.n	800276c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d149      	bne.n	8002748 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	2200      	movs	r2, #0
 80026be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f856 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03c      	beq.n	8002748 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	e853 3f00 	ldrex	r3, [r3]
 80026da:	623b      	str	r3, [r7, #32]
   return(result);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f4:	e841 2300 	strex	r3, r2, [r1]
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e6      	bne.n	80026ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3308      	adds	r3, #8
 8002706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	e853 3f00 	ldrex	r3, [r3]
 800270e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3308      	adds	r3, #8
 800271e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002720:	61fa      	str	r2, [r7, #28]
 8002722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	69b9      	ldr	r1, [r7, #24]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	e841 2300 	strex	r3, r2, [r1]
 800272c:	617b      	str	r3, [r7, #20]
   return(result);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e5      	bne.n	8002700 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e011      	b.n	800276c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3758      	adds	r7, #88	@ 0x58
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002784:	e04f      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800278c:	d04b      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7fd ff6d 	bl	800066c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e04e      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d037      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0xb2>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b80      	cmp	r3, #128	@ 0x80
 80027ba:	d034      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0xb2>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b40      	cmp	r3, #64	@ 0x40
 80027c0:	d031      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d110      	bne.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2208      	movs	r2, #8
 80027d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f838 	bl	800284e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2208      	movs	r2, #8
 80027e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e029      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002800:	d111      	bne.n	8002826 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800280a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f81e 	bl	800284e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e00f      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	429a      	cmp	r2, r3
 8002842:	d0a0      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800284e:	b480      	push	{r7}
 8002850:	b095      	sub	sp, #84	@ 0x54
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800286a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002874:	643b      	str	r3, [r7, #64]	@ 0x40
 8002876:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800287a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e6      	bne.n	8002856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3308      	adds	r3, #8
 800288e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	e853 3f00 	ldrex	r3, [r3]
 8002896:	61fb      	str	r3, [r7, #28]
   return(result);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3308      	adds	r3, #8
 80028a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028b0:	e841 2300 	strex	r3, r2, [r1]
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e5      	bne.n	8002888 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d118      	bne.n	80028f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f023 0310 	bic.w	r3, r3, #16
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	613b      	str	r3, [r7, #16]
   return(result);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e6      	bne.n	80028c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800290a:	bf00      	nop
 800290c:	3754      	adds	r7, #84	@ 0x54
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0a2      	sub	sp, #136	@ 0x88
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800291e:	f7fd fe3d 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002922:	f000 f839 	bl	8002998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002926:	f000 f8b9 	bl	8002a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800292a:	f000 f887 	bl	8002a3c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t i = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  while (1)
  {
      char buf[128];
      // Put the count first, then the message, then CRLF
      int len = snprintf(buf, sizeof(buf),
 8002934:	4638      	mov	r0, r7
 8002936:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800293a:	4a14      	ldr	r2, [pc, #80]	@ (800298c <main+0x74>)
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	f000 fa2d 	bl	8002d9c <sniprintf>
 8002942:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                         "%lu. Hello Big C0mputer, it is me, lil computer !!!\r\n",
                         (unsigned long)i);

      if (len < 0) {
 8002946:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0f      	blt.n	800296e <main+0x56>
          // formatting error (rare); skip send
      } else {
          // If it got truncated, clamp length to buffer size
          if (len >= (int)sizeof(buf)) len = (int)sizeof(buf) - 1;
 800294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002952:	2b7f      	cmp	r3, #127	@ 0x7f
 8002954:	dd02      	ble.n	800295c <main+0x44>
 8002956:	237f      	movs	r3, #127	@ 0x7f
 8002958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

          HAL_UART_Transmit(&huart2, (uint8_t*)buf, (uint16_t)len, HAL_MAX_DELAY);
 800295c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002960:	b29a      	uxth	r2, r3
 8002962:	4639      	mov	r1, r7
 8002964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002968:	4809      	ldr	r0, [pc, #36]	@ (8002990 <main+0x78>)
 800296a:	f7ff fb03 	bl	8001f74 <HAL_UART_Transmit>
      }

      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);  // on-board LED (PB3)
 800296e:	2108      	movs	r1, #8
 8002970:	4808      	ldr	r0, [pc, #32]	@ (8002994 <main+0x7c>)
 8002972:	f7fe f913 	bl	8000b9c <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 8002976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800297a:	f7fd fe83 	bl	8000684 <HAL_Delay>

      i++;
 800297e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002982:	3301      	adds	r3, #1
 8002984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  {
 8002988:	e7d4      	b.n	8002934 <main+0x1c>
 800298a:	bf00      	nop
 800298c:	0800371c 	.word	0x0800371c
 8002990:	2000007c 	.word	0x2000007c
 8002994:	48000400 	.word	0x48000400

08002998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b096      	sub	sp, #88	@ 0x58
 800299c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	2244      	movs	r2, #68	@ 0x44
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fa2e 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ac:	463b      	mov	r3, r7
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80029be:	f7fe f915 	bl	8000bec <HAL_PWREx_ControlVoltageScaling>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029c8:	f000 f8b2 	bl	8002b30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029cc:	2302      	movs	r3, #2
 80029ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d6:	2310      	movs	r3, #16
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029da:	2302      	movs	r3, #2
 80029dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029de:	2302      	movs	r3, #2
 80029e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80029e6:	230a      	movs	r3, #10
 80029e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029ea:	2307      	movs	r3, #7
 80029ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ee:	2302      	movs	r3, #2
 80029f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029f2:	2302      	movs	r3, #2
 80029f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f94c 	bl	8000c98 <HAL_RCC_OscConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002a06:	f000 f893 	bl	8002b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a0a:	230f      	movs	r3, #15
 8002a0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a1e:	463b      	mov	r3, r7
 8002a20:	2104      	movs	r1, #4
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fd4c 	bl	80014c0 <HAL_RCC_ClockConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a2e:	f000 f87f 	bl	8002b30 <Error_Handler>
  }
}
 8002a32:	bf00      	nop
 8002a34:	3758      	adds	r7, #88	@ 0x58
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a42:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <MX_USART2_UART_Init+0x5c>)
 8002a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a46:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4e:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a62:	220c      	movs	r2, #12
 8002a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	@ (8002a94 <MX_USART2_UART_Init+0x58>)
 8002a80:	f7ff fa2a 	bl	8001ed8 <HAL_UART_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a8a:	f000 f851 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000007c 	.word	0x2000007c
 8002a98:	40004400 	.word	0x40004400

08002a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	4a16      	ldr	r2, [pc, #88]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad6:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	4a10      	ldr	r2, [pc, #64]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <MX_GPIO_Init+0x8c>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2108      	movs	r1, #8
 8002afe:	480b      	ldr	r0, [pc, #44]	@ (8002b2c <MX_GPIO_Init+0x90>)
 8002b00:	f7fe f834 	bl	8000b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b04:	2308      	movs	r3, #8
 8002b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4804      	ldr	r0, [pc, #16]	@ (8002b2c <MX_GPIO_Init+0x90>)
 8002b1c:	f7fd febc 	bl	8000898 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b20:	bf00      	nop
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000400 	.word	0x48000400

08002b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <Error_Handler+0x8>

08002b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_MspInit+0x44>)
 8002b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b46:	4a0e      	ldr	r2, [pc, #56]	@ (8002b80 <HAL_MspInit+0x44>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <HAL_MspInit+0x44>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_MspInit+0x44>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <HAL_MspInit+0x44>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_MspInit+0x44>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b09e      	sub	sp, #120	@ 0x78
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	2254      	movs	r2, #84	@ 0x54
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f92f 	bl	8002e08 <memset>
  if(huart->Instance==USART2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a28      	ldr	r2, [pc, #160]	@ (8002c50 <HAL_UART_MspInit+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d148      	bne.n	8002c46 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe fea1 	bl	8001908 <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bcc:	f7ff ffb0 	bl	8002b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd0:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <HAL_UART_MspInit+0xd0>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_UART_MspInit+0xd0>)
 8002bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <HAL_UART_MspInit+0xd0>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_UART_MspInit+0xd0>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	4a19      	ldr	r2, [pc, #100]	@ (8002c54 <HAL_UART_MspInit+0xd0>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf4:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <HAL_UART_MspInit+0xd0>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c00:	2304      	movs	r3, #4
 8002c02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c10:	2307      	movs	r3, #7
 8002c12:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1e:	f7fd fe3b 	bl	8000898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002c34:	2303      	movs	r3, #3
 8002c36:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c42:	f7fd fe29 	bl	8000898 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c46:	bf00      	nop
 8002c48:	3778      	adds	r7, #120	@ 0x78
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40004400 	.word	0x40004400
 8002c54:	40021000 	.word	0x40021000

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <NMI_Handler+0x4>

08002c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <MemManage_Handler+0x4>

08002c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cae:	f7fd fcc9 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc0:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <_sbrk+0x5c>)
 8002cc2:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <_sbrk+0x60>)
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ccc:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <_sbrk+0x64>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <_sbrk+0x64>)
 8002cd6:	4a12      	ldr	r2, [pc, #72]	@ (8002d20 <_sbrk+0x68>)
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cda:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d207      	bcs.n	8002cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce8:	f000 f896 	bl	8002e18 <__errno>
 8002cec:	4603      	mov	r3, r0
 8002cee:	220c      	movs	r2, #12
 8002cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cf6:	e009      	b.n	8002d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfe:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <_sbrk+0x64>)
 8002d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	2000c000 	.word	0x2000c000
 8002d18:	00000400 	.word	0x00000400
 8002d1c:	20000104 	.word	0x20000104
 8002d20:	20000250 	.word	0x20000250

08002d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <SystemInit+0x20>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	4a05      	ldr	r2, [pc, #20]	@ (8002d44 <SystemInit+0x20>)
 8002d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d4c:	f7ff ffea 	bl	8002d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d50:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d52:	490d      	ldr	r1, [pc, #52]	@ (8002d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d54:	4a0d      	ldr	r2, [pc, #52]	@ (8002d8c <LoopForever+0xe>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d68:	4c0a      	ldr	r4, [pc, #40]	@ (8002d94 <LoopForever+0x16>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d76:	f000 f855 	bl	8002e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d7a:	f7ff fdcd 	bl	8002918 <main>

08002d7e <LoopForever>:

LoopForever:
    b LoopForever
 8002d7e:	e7fe      	b.n	8002d7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d80:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002d8c:	080037e0 	.word	0x080037e0
  ldr r2, =_sbss
 8002d90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002d94:	20000250 	.word	0x20000250

08002d98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d98:	e7fe      	b.n	8002d98 <ADC1_IRQHandler>
	...

08002d9c <sniprintf>:
 8002d9c:	b40c      	push	{r2, r3}
 8002d9e:	b530      	push	{r4, r5, lr}
 8002da0:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <sniprintf+0x68>)
 8002da2:	1e0c      	subs	r4, r1, #0
 8002da4:	681d      	ldr	r5, [r3, #0]
 8002da6:	b09d      	sub	sp, #116	@ 0x74
 8002da8:	da08      	bge.n	8002dbc <sniprintf+0x20>
 8002daa:	238b      	movs	r3, #139	@ 0x8b
 8002dac:	602b      	str	r3, [r5, #0]
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002db2:	b01d      	add	sp, #116	@ 0x74
 8002db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002db8:	b002      	add	sp, #8
 8002dba:	4770      	bx	lr
 8002dbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002dc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002dca:	bf14      	ite	ne
 8002dcc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002dd0:	4623      	moveq	r3, r4
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	9307      	str	r3, [sp, #28]
 8002dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dda:	9002      	str	r0, [sp, #8]
 8002ddc:	9006      	str	r0, [sp, #24]
 8002dde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002de2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002de4:	ab21      	add	r3, sp, #132	@ 0x84
 8002de6:	a902      	add	r1, sp, #8
 8002de8:	4628      	mov	r0, r5
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	f000 f994 	bl	8003118 <_svfiprintf_r>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	bfbc      	itt	lt
 8002df4:	238b      	movlt	r3, #139	@ 0x8b
 8002df6:	602b      	strlt	r3, [r5, #0]
 8002df8:	2c00      	cmp	r4, #0
 8002dfa:	d0da      	beq.n	8002db2 <sniprintf+0x16>
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e7d6      	b.n	8002db2 <sniprintf+0x16>
 8002e04:	2000000c 	.word	0x2000000c

08002e08 <memset>:
 8002e08:	4402      	add	r2, r0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <__errno>:
 8002e18:	4b01      	ldr	r3, [pc, #4]	@ (8002e20 <__errno+0x8>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2000000c 	.word	0x2000000c

08002e24 <__libc_init_array>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	4d0d      	ldr	r5, [pc, #52]	@ (8002e5c <__libc_init_array+0x38>)
 8002e28:	4c0d      	ldr	r4, [pc, #52]	@ (8002e60 <__libc_init_array+0x3c>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	2600      	movs	r6, #0
 8002e30:	42a6      	cmp	r6, r4
 8002e32:	d109      	bne.n	8002e48 <__libc_init_array+0x24>
 8002e34:	4d0b      	ldr	r5, [pc, #44]	@ (8002e64 <__libc_init_array+0x40>)
 8002e36:	4c0c      	ldr	r4, [pc, #48]	@ (8002e68 <__libc_init_array+0x44>)
 8002e38:	f000 fc64 	bl	8003704 <_init>
 8002e3c:	1b64      	subs	r4, r4, r5
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	2600      	movs	r6, #0
 8002e42:	42a6      	cmp	r6, r4
 8002e44:	d105      	bne.n	8002e52 <__libc_init_array+0x2e>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4c:	4798      	blx	r3
 8002e4e:	3601      	adds	r6, #1
 8002e50:	e7ee      	b.n	8002e30 <__libc_init_array+0xc>
 8002e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e56:	4798      	blx	r3
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7f2      	b.n	8002e42 <__libc_init_array+0x1e>
 8002e5c:	080037d8 	.word	0x080037d8
 8002e60:	080037d8 	.word	0x080037d8
 8002e64:	080037d8 	.word	0x080037d8
 8002e68:	080037dc 	.word	0x080037dc

08002e6c <__retarget_lock_acquire_recursive>:
 8002e6c:	4770      	bx	lr

08002e6e <__retarget_lock_release_recursive>:
 8002e6e:	4770      	bx	lr

08002e70 <_free_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4605      	mov	r5, r0
 8002e74:	2900      	cmp	r1, #0
 8002e76:	d041      	beq.n	8002efc <_free_r+0x8c>
 8002e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e7c:	1f0c      	subs	r4, r1, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bfb8      	it	lt
 8002e82:	18e4      	addlt	r4, r4, r3
 8002e84:	f000 f8e0 	bl	8003048 <__malloc_lock>
 8002e88:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <_free_r+0x90>)
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	b933      	cbnz	r3, 8002e9c <_free_r+0x2c>
 8002e8e:	6063      	str	r3, [r4, #4]
 8002e90:	6014      	str	r4, [r2, #0]
 8002e92:	4628      	mov	r0, r5
 8002e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e98:	f000 b8dc 	b.w	8003054 <__malloc_unlock>
 8002e9c:	42a3      	cmp	r3, r4
 8002e9e:	d908      	bls.n	8002eb2 <_free_r+0x42>
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	1821      	adds	r1, r4, r0
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	bf01      	itttt	eq
 8002ea8:	6819      	ldreq	r1, [r3, #0]
 8002eaa:	685b      	ldreq	r3, [r3, #4]
 8002eac:	1809      	addeq	r1, r1, r0
 8002eae:	6021      	streq	r1, [r4, #0]
 8002eb0:	e7ed      	b.n	8002e8e <_free_r+0x1e>
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b10b      	cbz	r3, 8002ebc <_free_r+0x4c>
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	d9fa      	bls.n	8002eb2 <_free_r+0x42>
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	1850      	adds	r0, r2, r1
 8002ec0:	42a0      	cmp	r0, r4
 8002ec2:	d10b      	bne.n	8002edc <_free_r+0x6c>
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	4401      	add	r1, r0
 8002ec8:	1850      	adds	r0, r2, r1
 8002eca:	4283      	cmp	r3, r0
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	d1e0      	bne.n	8002e92 <_free_r+0x22>
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	6053      	str	r3, [r2, #4]
 8002ed6:	4408      	add	r0, r1
 8002ed8:	6010      	str	r0, [r2, #0]
 8002eda:	e7da      	b.n	8002e92 <_free_r+0x22>
 8002edc:	d902      	bls.n	8002ee4 <_free_r+0x74>
 8002ede:	230c      	movs	r3, #12
 8002ee0:	602b      	str	r3, [r5, #0]
 8002ee2:	e7d6      	b.n	8002e92 <_free_r+0x22>
 8002ee4:	6820      	ldr	r0, [r4, #0]
 8002ee6:	1821      	adds	r1, r4, r0
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	bf04      	itt	eq
 8002eec:	6819      	ldreq	r1, [r3, #0]
 8002eee:	685b      	ldreq	r3, [r3, #4]
 8002ef0:	6063      	str	r3, [r4, #4]
 8002ef2:	bf04      	itt	eq
 8002ef4:	1809      	addeq	r1, r1, r0
 8002ef6:	6021      	streq	r1, [r4, #0]
 8002ef8:	6054      	str	r4, [r2, #4]
 8002efa:	e7ca      	b.n	8002e92 <_free_r+0x22>
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	bf00      	nop
 8002f00:	2000024c 	.word	0x2000024c

08002f04 <sbrk_aligned>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4e0f      	ldr	r6, [pc, #60]	@ (8002f44 <sbrk_aligned+0x40>)
 8002f08:	460c      	mov	r4, r1
 8002f0a:	6831      	ldr	r1, [r6, #0]
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	b911      	cbnz	r1, 8002f16 <sbrk_aligned+0x12>
 8002f10:	f000 fba4 	bl	800365c <_sbrk_r>
 8002f14:	6030      	str	r0, [r6, #0]
 8002f16:	4621      	mov	r1, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f000 fb9f 	bl	800365c <_sbrk_r>
 8002f1e:	1c43      	adds	r3, r0, #1
 8002f20:	d103      	bne.n	8002f2a <sbrk_aligned+0x26>
 8002f22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f26:	4620      	mov	r0, r4
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
 8002f2a:	1cc4      	adds	r4, r0, #3
 8002f2c:	f024 0403 	bic.w	r4, r4, #3
 8002f30:	42a0      	cmp	r0, r4
 8002f32:	d0f8      	beq.n	8002f26 <sbrk_aligned+0x22>
 8002f34:	1a21      	subs	r1, r4, r0
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 fb90 	bl	800365c <_sbrk_r>
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d1f2      	bne.n	8002f26 <sbrk_aligned+0x22>
 8002f40:	e7ef      	b.n	8002f22 <sbrk_aligned+0x1e>
 8002f42:	bf00      	nop
 8002f44:	20000248 	.word	0x20000248

08002f48 <_malloc_r>:
 8002f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f4c:	1ccd      	adds	r5, r1, #3
 8002f4e:	f025 0503 	bic.w	r5, r5, #3
 8002f52:	3508      	adds	r5, #8
 8002f54:	2d0c      	cmp	r5, #12
 8002f56:	bf38      	it	cc
 8002f58:	250c      	movcc	r5, #12
 8002f5a:	2d00      	cmp	r5, #0
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	db01      	blt.n	8002f64 <_malloc_r+0x1c>
 8002f60:	42a9      	cmp	r1, r5
 8002f62:	d904      	bls.n	8002f6e <_malloc_r+0x26>
 8002f64:	230c      	movs	r3, #12
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003044 <_malloc_r+0xfc>
 8002f72:	f000 f869 	bl	8003048 <__malloc_lock>
 8002f76:	f8d8 3000 	ldr.w	r3, [r8]
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	bb44      	cbnz	r4, 8002fd0 <_malloc_r+0x88>
 8002f7e:	4629      	mov	r1, r5
 8002f80:	4630      	mov	r0, r6
 8002f82:	f7ff ffbf 	bl	8002f04 <sbrk_aligned>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	4604      	mov	r4, r0
 8002f8a:	d158      	bne.n	800303e <_malloc_r+0xf6>
 8002f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8002f90:	4627      	mov	r7, r4
 8002f92:	2f00      	cmp	r7, #0
 8002f94:	d143      	bne.n	800301e <_malloc_r+0xd6>
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d04b      	beq.n	8003032 <_malloc_r+0xea>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	eb04 0903 	add.w	r9, r4, r3
 8002fa4:	f000 fb5a 	bl	800365c <_sbrk_r>
 8002fa8:	4581      	cmp	r9, r0
 8002faa:	d142      	bne.n	8003032 <_malloc_r+0xea>
 8002fac:	6821      	ldr	r1, [r4, #0]
 8002fae:	1a6d      	subs	r5, r5, r1
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f7ff ffa6 	bl	8002f04 <sbrk_aligned>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d03a      	beq.n	8003032 <_malloc_r+0xea>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	442b      	add	r3, r5
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	bb62      	cbnz	r2, 8003024 <_malloc_r+0xdc>
 8002fca:	f8c8 7000 	str.w	r7, [r8]
 8002fce:	e00f      	b.n	8002ff0 <_malloc_r+0xa8>
 8002fd0:	6822      	ldr	r2, [r4, #0]
 8002fd2:	1b52      	subs	r2, r2, r5
 8002fd4:	d420      	bmi.n	8003018 <_malloc_r+0xd0>
 8002fd6:	2a0b      	cmp	r2, #11
 8002fd8:	d917      	bls.n	800300a <_malloc_r+0xc2>
 8002fda:	1961      	adds	r1, r4, r5
 8002fdc:	42a3      	cmp	r3, r4
 8002fde:	6025      	str	r5, [r4, #0]
 8002fe0:	bf18      	it	ne
 8002fe2:	6059      	strne	r1, [r3, #4]
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	bf08      	it	eq
 8002fe8:	f8c8 1000 	streq.w	r1, [r8]
 8002fec:	5162      	str	r2, [r4, r5]
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f000 f82f 	bl	8003054 <__malloc_unlock>
 8002ff6:	f104 000b 	add.w	r0, r4, #11
 8002ffa:	1d23      	adds	r3, r4, #4
 8002ffc:	f020 0007 	bic.w	r0, r0, #7
 8003000:	1ac2      	subs	r2, r0, r3
 8003002:	bf1c      	itt	ne
 8003004:	1a1b      	subne	r3, r3, r0
 8003006:	50a3      	strne	r3, [r4, r2]
 8003008:	e7af      	b.n	8002f6a <_malloc_r+0x22>
 800300a:	6862      	ldr	r2, [r4, #4]
 800300c:	42a3      	cmp	r3, r4
 800300e:	bf0c      	ite	eq
 8003010:	f8c8 2000 	streq.w	r2, [r8]
 8003014:	605a      	strne	r2, [r3, #4]
 8003016:	e7eb      	b.n	8002ff0 <_malloc_r+0xa8>
 8003018:	4623      	mov	r3, r4
 800301a:	6864      	ldr	r4, [r4, #4]
 800301c:	e7ae      	b.n	8002f7c <_malloc_r+0x34>
 800301e:	463c      	mov	r4, r7
 8003020:	687f      	ldr	r7, [r7, #4]
 8003022:	e7b6      	b.n	8002f92 <_malloc_r+0x4a>
 8003024:	461a      	mov	r2, r3
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	42a3      	cmp	r3, r4
 800302a:	d1fb      	bne.n	8003024 <_malloc_r+0xdc>
 800302c:	2300      	movs	r3, #0
 800302e:	6053      	str	r3, [r2, #4]
 8003030:	e7de      	b.n	8002ff0 <_malloc_r+0xa8>
 8003032:	230c      	movs	r3, #12
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	4630      	mov	r0, r6
 8003038:	f000 f80c 	bl	8003054 <__malloc_unlock>
 800303c:	e794      	b.n	8002f68 <_malloc_r+0x20>
 800303e:	6005      	str	r5, [r0, #0]
 8003040:	e7d6      	b.n	8002ff0 <_malloc_r+0xa8>
 8003042:	bf00      	nop
 8003044:	2000024c 	.word	0x2000024c

08003048 <__malloc_lock>:
 8003048:	4801      	ldr	r0, [pc, #4]	@ (8003050 <__malloc_lock+0x8>)
 800304a:	f7ff bf0f 	b.w	8002e6c <__retarget_lock_acquire_recursive>
 800304e:	bf00      	nop
 8003050:	20000244 	.word	0x20000244

08003054 <__malloc_unlock>:
 8003054:	4801      	ldr	r0, [pc, #4]	@ (800305c <__malloc_unlock+0x8>)
 8003056:	f7ff bf0a 	b.w	8002e6e <__retarget_lock_release_recursive>
 800305a:	bf00      	nop
 800305c:	20000244 	.word	0x20000244

08003060 <__ssputs_r>:
 8003060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003064:	688e      	ldr	r6, [r1, #8]
 8003066:	461f      	mov	r7, r3
 8003068:	42be      	cmp	r6, r7
 800306a:	680b      	ldr	r3, [r1, #0]
 800306c:	4682      	mov	sl, r0
 800306e:	460c      	mov	r4, r1
 8003070:	4690      	mov	r8, r2
 8003072:	d82d      	bhi.n	80030d0 <__ssputs_r+0x70>
 8003074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003078:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800307c:	d026      	beq.n	80030cc <__ssputs_r+0x6c>
 800307e:	6965      	ldr	r5, [r4, #20]
 8003080:	6909      	ldr	r1, [r1, #16]
 8003082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003086:	eba3 0901 	sub.w	r9, r3, r1
 800308a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800308e:	1c7b      	adds	r3, r7, #1
 8003090:	444b      	add	r3, r9
 8003092:	106d      	asrs	r5, r5, #1
 8003094:	429d      	cmp	r5, r3
 8003096:	bf38      	it	cc
 8003098:	461d      	movcc	r5, r3
 800309a:	0553      	lsls	r3, r2, #21
 800309c:	d527      	bpl.n	80030ee <__ssputs_r+0x8e>
 800309e:	4629      	mov	r1, r5
 80030a0:	f7ff ff52 	bl	8002f48 <_malloc_r>
 80030a4:	4606      	mov	r6, r0
 80030a6:	b360      	cbz	r0, 8003102 <__ssputs_r+0xa2>
 80030a8:	6921      	ldr	r1, [r4, #16]
 80030aa:	464a      	mov	r2, r9
 80030ac:	f000 fae6 	bl	800367c <memcpy>
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	6126      	str	r6, [r4, #16]
 80030be:	6165      	str	r5, [r4, #20]
 80030c0:	444e      	add	r6, r9
 80030c2:	eba5 0509 	sub.w	r5, r5, r9
 80030c6:	6026      	str	r6, [r4, #0]
 80030c8:	60a5      	str	r5, [r4, #8]
 80030ca:	463e      	mov	r6, r7
 80030cc:	42be      	cmp	r6, r7
 80030ce:	d900      	bls.n	80030d2 <__ssputs_r+0x72>
 80030d0:	463e      	mov	r6, r7
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	4632      	mov	r2, r6
 80030d6:	4641      	mov	r1, r8
 80030d8:	f000 faa6 	bl	8003628 <memmove>
 80030dc:	68a3      	ldr	r3, [r4, #8]
 80030de:	1b9b      	subs	r3, r3, r6
 80030e0:	60a3      	str	r3, [r4, #8]
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	4433      	add	r3, r6
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	2000      	movs	r0, #0
 80030ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ee:	462a      	mov	r2, r5
 80030f0:	f000 fad2 	bl	8003698 <_realloc_r>
 80030f4:	4606      	mov	r6, r0
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d1e0      	bne.n	80030bc <__ssputs_r+0x5c>
 80030fa:	6921      	ldr	r1, [r4, #16]
 80030fc:	4650      	mov	r0, sl
 80030fe:	f7ff feb7 	bl	8002e70 <_free_r>
 8003102:	230c      	movs	r3, #12
 8003104:	f8ca 3000 	str.w	r3, [sl]
 8003108:	89a3      	ldrh	r3, [r4, #12]
 800310a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003114:	e7e9      	b.n	80030ea <__ssputs_r+0x8a>
	...

08003118 <_svfiprintf_r>:
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	4698      	mov	r8, r3
 800311e:	898b      	ldrh	r3, [r1, #12]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	b09d      	sub	sp, #116	@ 0x74
 8003124:	4607      	mov	r7, r0
 8003126:	460d      	mov	r5, r1
 8003128:	4614      	mov	r4, r2
 800312a:	d510      	bpl.n	800314e <_svfiprintf_r+0x36>
 800312c:	690b      	ldr	r3, [r1, #16]
 800312e:	b973      	cbnz	r3, 800314e <_svfiprintf_r+0x36>
 8003130:	2140      	movs	r1, #64	@ 0x40
 8003132:	f7ff ff09 	bl	8002f48 <_malloc_r>
 8003136:	6028      	str	r0, [r5, #0]
 8003138:	6128      	str	r0, [r5, #16]
 800313a:	b930      	cbnz	r0, 800314a <_svfiprintf_r+0x32>
 800313c:	230c      	movs	r3, #12
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003144:	b01d      	add	sp, #116	@ 0x74
 8003146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314a:	2340      	movs	r3, #64	@ 0x40
 800314c:	616b      	str	r3, [r5, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	9309      	str	r3, [sp, #36]	@ 0x24
 8003152:	2320      	movs	r3, #32
 8003154:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003158:	f8cd 800c 	str.w	r8, [sp, #12]
 800315c:	2330      	movs	r3, #48	@ 0x30
 800315e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80032fc <_svfiprintf_r+0x1e4>
 8003162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003166:	f04f 0901 	mov.w	r9, #1
 800316a:	4623      	mov	r3, r4
 800316c:	469a      	mov	sl, r3
 800316e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003172:	b10a      	cbz	r2, 8003178 <_svfiprintf_r+0x60>
 8003174:	2a25      	cmp	r2, #37	@ 0x25
 8003176:	d1f9      	bne.n	800316c <_svfiprintf_r+0x54>
 8003178:	ebba 0b04 	subs.w	fp, sl, r4
 800317c:	d00b      	beq.n	8003196 <_svfiprintf_r+0x7e>
 800317e:	465b      	mov	r3, fp
 8003180:	4622      	mov	r2, r4
 8003182:	4629      	mov	r1, r5
 8003184:	4638      	mov	r0, r7
 8003186:	f7ff ff6b 	bl	8003060 <__ssputs_r>
 800318a:	3001      	adds	r0, #1
 800318c:	f000 80a7 	beq.w	80032de <_svfiprintf_r+0x1c6>
 8003190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003192:	445a      	add	r2, fp
 8003194:	9209      	str	r2, [sp, #36]	@ 0x24
 8003196:	f89a 3000 	ldrb.w	r3, [sl]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 809f 	beq.w	80032de <_svfiprintf_r+0x1c6>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031aa:	f10a 0a01 	add.w	sl, sl, #1
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	9307      	str	r3, [sp, #28]
 80031b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80031b8:	4654      	mov	r4, sl
 80031ba:	2205      	movs	r2, #5
 80031bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c0:	484e      	ldr	r0, [pc, #312]	@ (80032fc <_svfiprintf_r+0x1e4>)
 80031c2:	f7fd f805 	bl	80001d0 <memchr>
 80031c6:	9a04      	ldr	r2, [sp, #16]
 80031c8:	b9d8      	cbnz	r0, 8003202 <_svfiprintf_r+0xea>
 80031ca:	06d0      	lsls	r0, r2, #27
 80031cc:	bf44      	itt	mi
 80031ce:	2320      	movmi	r3, #32
 80031d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031d4:	0711      	lsls	r1, r2, #28
 80031d6:	bf44      	itt	mi
 80031d8:	232b      	movmi	r3, #43	@ 0x2b
 80031da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031de:	f89a 3000 	ldrb.w	r3, [sl]
 80031e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031e4:	d015      	beq.n	8003212 <_svfiprintf_r+0xfa>
 80031e6:	9a07      	ldr	r2, [sp, #28]
 80031e8:	4654      	mov	r4, sl
 80031ea:	2000      	movs	r0, #0
 80031ec:	f04f 0c0a 	mov.w	ip, #10
 80031f0:	4621      	mov	r1, r4
 80031f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031f6:	3b30      	subs	r3, #48	@ 0x30
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d94b      	bls.n	8003294 <_svfiprintf_r+0x17c>
 80031fc:	b1b0      	cbz	r0, 800322c <_svfiprintf_r+0x114>
 80031fe:	9207      	str	r2, [sp, #28]
 8003200:	e014      	b.n	800322c <_svfiprintf_r+0x114>
 8003202:	eba0 0308 	sub.w	r3, r0, r8
 8003206:	fa09 f303 	lsl.w	r3, r9, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	46a2      	mov	sl, r4
 8003210:	e7d2      	b.n	80031b8 <_svfiprintf_r+0xa0>
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	1d19      	adds	r1, r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	9103      	str	r1, [sp, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	bfbb      	ittet	lt
 800321e:	425b      	neglt	r3, r3
 8003220:	f042 0202 	orrlt.w	r2, r2, #2
 8003224:	9307      	strge	r3, [sp, #28]
 8003226:	9307      	strlt	r3, [sp, #28]
 8003228:	bfb8      	it	lt
 800322a:	9204      	strlt	r2, [sp, #16]
 800322c:	7823      	ldrb	r3, [r4, #0]
 800322e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003230:	d10a      	bne.n	8003248 <_svfiprintf_r+0x130>
 8003232:	7863      	ldrb	r3, [r4, #1]
 8003234:	2b2a      	cmp	r3, #42	@ 0x2a
 8003236:	d132      	bne.n	800329e <_svfiprintf_r+0x186>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9203      	str	r2, [sp, #12]
 8003240:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003244:	3402      	adds	r4, #2
 8003246:	9305      	str	r3, [sp, #20]
 8003248:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800330c <_svfiprintf_r+0x1f4>
 800324c:	7821      	ldrb	r1, [r4, #0]
 800324e:	2203      	movs	r2, #3
 8003250:	4650      	mov	r0, sl
 8003252:	f7fc ffbd 	bl	80001d0 <memchr>
 8003256:	b138      	cbz	r0, 8003268 <_svfiprintf_r+0x150>
 8003258:	9b04      	ldr	r3, [sp, #16]
 800325a:	eba0 000a 	sub.w	r0, r0, sl
 800325e:	2240      	movs	r2, #64	@ 0x40
 8003260:	4082      	lsls	r2, r0
 8003262:	4313      	orrs	r3, r2
 8003264:	3401      	adds	r4, #1
 8003266:	9304      	str	r3, [sp, #16]
 8003268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326c:	4824      	ldr	r0, [pc, #144]	@ (8003300 <_svfiprintf_r+0x1e8>)
 800326e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003272:	2206      	movs	r2, #6
 8003274:	f7fc ffac 	bl	80001d0 <memchr>
 8003278:	2800      	cmp	r0, #0
 800327a:	d036      	beq.n	80032ea <_svfiprintf_r+0x1d2>
 800327c:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <_svfiprintf_r+0x1ec>)
 800327e:	bb1b      	cbnz	r3, 80032c8 <_svfiprintf_r+0x1b0>
 8003280:	9b03      	ldr	r3, [sp, #12]
 8003282:	3307      	adds	r3, #7
 8003284:	f023 0307 	bic.w	r3, r3, #7
 8003288:	3308      	adds	r3, #8
 800328a:	9303      	str	r3, [sp, #12]
 800328c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800328e:	4433      	add	r3, r6
 8003290:	9309      	str	r3, [sp, #36]	@ 0x24
 8003292:	e76a      	b.n	800316a <_svfiprintf_r+0x52>
 8003294:	fb0c 3202 	mla	r2, ip, r2, r3
 8003298:	460c      	mov	r4, r1
 800329a:	2001      	movs	r0, #1
 800329c:	e7a8      	b.n	80031f0 <_svfiprintf_r+0xd8>
 800329e:	2300      	movs	r3, #0
 80032a0:	3401      	adds	r4, #1
 80032a2:	9305      	str	r3, [sp, #20]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f04f 0c0a 	mov.w	ip, #10
 80032aa:	4620      	mov	r0, r4
 80032ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032b0:	3a30      	subs	r2, #48	@ 0x30
 80032b2:	2a09      	cmp	r2, #9
 80032b4:	d903      	bls.n	80032be <_svfiprintf_r+0x1a6>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0c6      	beq.n	8003248 <_svfiprintf_r+0x130>
 80032ba:	9105      	str	r1, [sp, #20]
 80032bc:	e7c4      	b.n	8003248 <_svfiprintf_r+0x130>
 80032be:	fb0c 2101 	mla	r1, ip, r1, r2
 80032c2:	4604      	mov	r4, r0
 80032c4:	2301      	movs	r3, #1
 80032c6:	e7f0      	b.n	80032aa <_svfiprintf_r+0x192>
 80032c8:	ab03      	add	r3, sp, #12
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	462a      	mov	r2, r5
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <_svfiprintf_r+0x1f0>)
 80032d0:	a904      	add	r1, sp, #16
 80032d2:	4638      	mov	r0, r7
 80032d4:	f3af 8000 	nop.w
 80032d8:	1c42      	adds	r2, r0, #1
 80032da:	4606      	mov	r6, r0
 80032dc:	d1d6      	bne.n	800328c <_svfiprintf_r+0x174>
 80032de:	89ab      	ldrh	r3, [r5, #12]
 80032e0:	065b      	lsls	r3, r3, #25
 80032e2:	f53f af2d 	bmi.w	8003140 <_svfiprintf_r+0x28>
 80032e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032e8:	e72c      	b.n	8003144 <_svfiprintf_r+0x2c>
 80032ea:	ab03      	add	r3, sp, #12
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	462a      	mov	r2, r5
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <_svfiprintf_r+0x1f0>)
 80032f2:	a904      	add	r1, sp, #16
 80032f4:	4638      	mov	r0, r7
 80032f6:	f000 f879 	bl	80033ec <_printf_i>
 80032fa:	e7ed      	b.n	80032d8 <_svfiprintf_r+0x1c0>
 80032fc:	0800379c 	.word	0x0800379c
 8003300:	080037a6 	.word	0x080037a6
 8003304:	00000000 	.word	0x00000000
 8003308:	08003061 	.word	0x08003061
 800330c:	080037a2 	.word	0x080037a2

08003310 <_printf_common>:
 8003310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003314:	4616      	mov	r6, r2
 8003316:	4698      	mov	r8, r3
 8003318:	688a      	ldr	r2, [r1, #8]
 800331a:	690b      	ldr	r3, [r1, #16]
 800331c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003320:	4293      	cmp	r3, r2
 8003322:	bfb8      	it	lt
 8003324:	4613      	movlt	r3, r2
 8003326:	6033      	str	r3, [r6, #0]
 8003328:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800332c:	4607      	mov	r7, r0
 800332e:	460c      	mov	r4, r1
 8003330:	b10a      	cbz	r2, 8003336 <_printf_common+0x26>
 8003332:	3301      	adds	r3, #1
 8003334:	6033      	str	r3, [r6, #0]
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	0699      	lsls	r1, r3, #26
 800333a:	bf42      	ittt	mi
 800333c:	6833      	ldrmi	r3, [r6, #0]
 800333e:	3302      	addmi	r3, #2
 8003340:	6033      	strmi	r3, [r6, #0]
 8003342:	6825      	ldr	r5, [r4, #0]
 8003344:	f015 0506 	ands.w	r5, r5, #6
 8003348:	d106      	bne.n	8003358 <_printf_common+0x48>
 800334a:	f104 0a19 	add.w	sl, r4, #25
 800334e:	68e3      	ldr	r3, [r4, #12]
 8003350:	6832      	ldr	r2, [r6, #0]
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	42ab      	cmp	r3, r5
 8003356:	dc26      	bgt.n	80033a6 <_printf_common+0x96>
 8003358:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800335c:	6822      	ldr	r2, [r4, #0]
 800335e:	3b00      	subs	r3, #0
 8003360:	bf18      	it	ne
 8003362:	2301      	movne	r3, #1
 8003364:	0692      	lsls	r2, r2, #26
 8003366:	d42b      	bmi.n	80033c0 <_printf_common+0xb0>
 8003368:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800336c:	4641      	mov	r1, r8
 800336e:	4638      	mov	r0, r7
 8003370:	47c8      	blx	r9
 8003372:	3001      	adds	r0, #1
 8003374:	d01e      	beq.n	80033b4 <_printf_common+0xa4>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	6922      	ldr	r2, [r4, #16]
 800337a:	f003 0306 	and.w	r3, r3, #6
 800337e:	2b04      	cmp	r3, #4
 8003380:	bf02      	ittt	eq
 8003382:	68e5      	ldreq	r5, [r4, #12]
 8003384:	6833      	ldreq	r3, [r6, #0]
 8003386:	1aed      	subeq	r5, r5, r3
 8003388:	68a3      	ldr	r3, [r4, #8]
 800338a:	bf0c      	ite	eq
 800338c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003390:	2500      	movne	r5, #0
 8003392:	4293      	cmp	r3, r2
 8003394:	bfc4      	itt	gt
 8003396:	1a9b      	subgt	r3, r3, r2
 8003398:	18ed      	addgt	r5, r5, r3
 800339a:	2600      	movs	r6, #0
 800339c:	341a      	adds	r4, #26
 800339e:	42b5      	cmp	r5, r6
 80033a0:	d11a      	bne.n	80033d8 <_printf_common+0xc8>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e008      	b.n	80033b8 <_printf_common+0xa8>
 80033a6:	2301      	movs	r3, #1
 80033a8:	4652      	mov	r2, sl
 80033aa:	4641      	mov	r1, r8
 80033ac:	4638      	mov	r0, r7
 80033ae:	47c8      	blx	r9
 80033b0:	3001      	adds	r0, #1
 80033b2:	d103      	bne.n	80033bc <_printf_common+0xac>
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033bc:	3501      	adds	r5, #1
 80033be:	e7c6      	b.n	800334e <_printf_common+0x3e>
 80033c0:	18e1      	adds	r1, r4, r3
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	2030      	movs	r0, #48	@ 0x30
 80033c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033ca:	4422      	add	r2, r4
 80033cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033d4:	3302      	adds	r3, #2
 80033d6:	e7c7      	b.n	8003368 <_printf_common+0x58>
 80033d8:	2301      	movs	r3, #1
 80033da:	4622      	mov	r2, r4
 80033dc:	4641      	mov	r1, r8
 80033de:	4638      	mov	r0, r7
 80033e0:	47c8      	blx	r9
 80033e2:	3001      	adds	r0, #1
 80033e4:	d0e6      	beq.n	80033b4 <_printf_common+0xa4>
 80033e6:	3601      	adds	r6, #1
 80033e8:	e7d9      	b.n	800339e <_printf_common+0x8e>
	...

080033ec <_printf_i>:
 80033ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	7e0f      	ldrb	r7, [r1, #24]
 80033f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033f4:	2f78      	cmp	r7, #120	@ 0x78
 80033f6:	4691      	mov	r9, r2
 80033f8:	4680      	mov	r8, r0
 80033fa:	460c      	mov	r4, r1
 80033fc:	469a      	mov	sl, r3
 80033fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003402:	d807      	bhi.n	8003414 <_printf_i+0x28>
 8003404:	2f62      	cmp	r7, #98	@ 0x62
 8003406:	d80a      	bhi.n	800341e <_printf_i+0x32>
 8003408:	2f00      	cmp	r7, #0
 800340a:	f000 80d1 	beq.w	80035b0 <_printf_i+0x1c4>
 800340e:	2f58      	cmp	r7, #88	@ 0x58
 8003410:	f000 80b8 	beq.w	8003584 <_printf_i+0x198>
 8003414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003418:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800341c:	e03a      	b.n	8003494 <_printf_i+0xa8>
 800341e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003422:	2b15      	cmp	r3, #21
 8003424:	d8f6      	bhi.n	8003414 <_printf_i+0x28>
 8003426:	a101      	add	r1, pc, #4	@ (adr r1, 800342c <_printf_i+0x40>)
 8003428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800342c:	08003485 	.word	0x08003485
 8003430:	08003499 	.word	0x08003499
 8003434:	08003415 	.word	0x08003415
 8003438:	08003415 	.word	0x08003415
 800343c:	08003415 	.word	0x08003415
 8003440:	08003415 	.word	0x08003415
 8003444:	08003499 	.word	0x08003499
 8003448:	08003415 	.word	0x08003415
 800344c:	08003415 	.word	0x08003415
 8003450:	08003415 	.word	0x08003415
 8003454:	08003415 	.word	0x08003415
 8003458:	08003597 	.word	0x08003597
 800345c:	080034c3 	.word	0x080034c3
 8003460:	08003551 	.word	0x08003551
 8003464:	08003415 	.word	0x08003415
 8003468:	08003415 	.word	0x08003415
 800346c:	080035b9 	.word	0x080035b9
 8003470:	08003415 	.word	0x08003415
 8003474:	080034c3 	.word	0x080034c3
 8003478:	08003415 	.word	0x08003415
 800347c:	08003415 	.word	0x08003415
 8003480:	08003559 	.word	0x08003559
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6032      	str	r2, [r6, #0]
 800348c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003490:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003494:	2301      	movs	r3, #1
 8003496:	e09c      	b.n	80035d2 <_printf_i+0x1e6>
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	1d19      	adds	r1, r3, #4
 800349e:	6031      	str	r1, [r6, #0]
 80034a0:	0606      	lsls	r6, r0, #24
 80034a2:	d501      	bpl.n	80034a8 <_printf_i+0xbc>
 80034a4:	681d      	ldr	r5, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <_printf_i+0xc4>
 80034a8:	0645      	lsls	r5, r0, #25
 80034aa:	d5fb      	bpl.n	80034a4 <_printf_i+0xb8>
 80034ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	da03      	bge.n	80034bc <_printf_i+0xd0>
 80034b4:	232d      	movs	r3, #45	@ 0x2d
 80034b6:	426d      	negs	r5, r5
 80034b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034bc:	4858      	ldr	r0, [pc, #352]	@ (8003620 <_printf_i+0x234>)
 80034be:	230a      	movs	r3, #10
 80034c0:	e011      	b.n	80034e6 <_printf_i+0xfa>
 80034c2:	6821      	ldr	r1, [r4, #0]
 80034c4:	6833      	ldr	r3, [r6, #0]
 80034c6:	0608      	lsls	r0, r1, #24
 80034c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80034cc:	d402      	bmi.n	80034d4 <_printf_i+0xe8>
 80034ce:	0649      	lsls	r1, r1, #25
 80034d0:	bf48      	it	mi
 80034d2:	b2ad      	uxthmi	r5, r5
 80034d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80034d6:	4852      	ldr	r0, [pc, #328]	@ (8003620 <_printf_i+0x234>)
 80034d8:	6033      	str	r3, [r6, #0]
 80034da:	bf14      	ite	ne
 80034dc:	230a      	movne	r3, #10
 80034de:	2308      	moveq	r3, #8
 80034e0:	2100      	movs	r1, #0
 80034e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034e6:	6866      	ldr	r6, [r4, #4]
 80034e8:	60a6      	str	r6, [r4, #8]
 80034ea:	2e00      	cmp	r6, #0
 80034ec:	db05      	blt.n	80034fa <_printf_i+0x10e>
 80034ee:	6821      	ldr	r1, [r4, #0]
 80034f0:	432e      	orrs	r6, r5
 80034f2:	f021 0104 	bic.w	r1, r1, #4
 80034f6:	6021      	str	r1, [r4, #0]
 80034f8:	d04b      	beq.n	8003592 <_printf_i+0x1a6>
 80034fa:	4616      	mov	r6, r2
 80034fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003500:	fb03 5711 	mls	r7, r3, r1, r5
 8003504:	5dc7      	ldrb	r7, [r0, r7]
 8003506:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800350a:	462f      	mov	r7, r5
 800350c:	42bb      	cmp	r3, r7
 800350e:	460d      	mov	r5, r1
 8003510:	d9f4      	bls.n	80034fc <_printf_i+0x110>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d10b      	bne.n	800352e <_printf_i+0x142>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	07df      	lsls	r7, r3, #31
 800351a:	d508      	bpl.n	800352e <_printf_i+0x142>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	6861      	ldr	r1, [r4, #4]
 8003520:	4299      	cmp	r1, r3
 8003522:	bfde      	ittt	le
 8003524:	2330      	movle	r3, #48	@ 0x30
 8003526:	f806 3c01 	strble.w	r3, [r6, #-1]
 800352a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800352e:	1b92      	subs	r2, r2, r6
 8003530:	6122      	str	r2, [r4, #16]
 8003532:	f8cd a000 	str.w	sl, [sp]
 8003536:	464b      	mov	r3, r9
 8003538:	aa03      	add	r2, sp, #12
 800353a:	4621      	mov	r1, r4
 800353c:	4640      	mov	r0, r8
 800353e:	f7ff fee7 	bl	8003310 <_printf_common>
 8003542:	3001      	adds	r0, #1
 8003544:	d14a      	bne.n	80035dc <_printf_i+0x1f0>
 8003546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800354a:	b004      	add	sp, #16
 800354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	f043 0320 	orr.w	r3, r3, #32
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	4832      	ldr	r0, [pc, #200]	@ (8003624 <_printf_i+0x238>)
 800355a:	2778      	movs	r7, #120	@ 0x78
 800355c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	6831      	ldr	r1, [r6, #0]
 8003564:	061f      	lsls	r7, r3, #24
 8003566:	f851 5b04 	ldr.w	r5, [r1], #4
 800356a:	d402      	bmi.n	8003572 <_printf_i+0x186>
 800356c:	065f      	lsls	r7, r3, #25
 800356e:	bf48      	it	mi
 8003570:	b2ad      	uxthmi	r5, r5
 8003572:	6031      	str	r1, [r6, #0]
 8003574:	07d9      	lsls	r1, r3, #31
 8003576:	bf44      	itt	mi
 8003578:	f043 0320 	orrmi.w	r3, r3, #32
 800357c:	6023      	strmi	r3, [r4, #0]
 800357e:	b11d      	cbz	r5, 8003588 <_printf_i+0x19c>
 8003580:	2310      	movs	r3, #16
 8003582:	e7ad      	b.n	80034e0 <_printf_i+0xf4>
 8003584:	4826      	ldr	r0, [pc, #152]	@ (8003620 <_printf_i+0x234>)
 8003586:	e7e9      	b.n	800355c <_printf_i+0x170>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	f023 0320 	bic.w	r3, r3, #32
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	e7f6      	b.n	8003580 <_printf_i+0x194>
 8003592:	4616      	mov	r6, r2
 8003594:	e7bd      	b.n	8003512 <_printf_i+0x126>
 8003596:	6833      	ldr	r3, [r6, #0]
 8003598:	6825      	ldr	r5, [r4, #0]
 800359a:	6961      	ldr	r1, [r4, #20]
 800359c:	1d18      	adds	r0, r3, #4
 800359e:	6030      	str	r0, [r6, #0]
 80035a0:	062e      	lsls	r6, r5, #24
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	d501      	bpl.n	80035aa <_printf_i+0x1be>
 80035a6:	6019      	str	r1, [r3, #0]
 80035a8:	e002      	b.n	80035b0 <_printf_i+0x1c4>
 80035aa:	0668      	lsls	r0, r5, #25
 80035ac:	d5fb      	bpl.n	80035a6 <_printf_i+0x1ba>
 80035ae:	8019      	strh	r1, [r3, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	6123      	str	r3, [r4, #16]
 80035b4:	4616      	mov	r6, r2
 80035b6:	e7bc      	b.n	8003532 <_printf_i+0x146>
 80035b8:	6833      	ldr	r3, [r6, #0]
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	6032      	str	r2, [r6, #0]
 80035be:	681e      	ldr	r6, [r3, #0]
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	2100      	movs	r1, #0
 80035c4:	4630      	mov	r0, r6
 80035c6:	f7fc fe03 	bl	80001d0 <memchr>
 80035ca:	b108      	cbz	r0, 80035d0 <_printf_i+0x1e4>
 80035cc:	1b80      	subs	r0, r0, r6
 80035ce:	6060      	str	r0, [r4, #4]
 80035d0:	6863      	ldr	r3, [r4, #4]
 80035d2:	6123      	str	r3, [r4, #16]
 80035d4:	2300      	movs	r3, #0
 80035d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035da:	e7aa      	b.n	8003532 <_printf_i+0x146>
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	4632      	mov	r2, r6
 80035e0:	4649      	mov	r1, r9
 80035e2:	4640      	mov	r0, r8
 80035e4:	47d0      	blx	sl
 80035e6:	3001      	adds	r0, #1
 80035e8:	d0ad      	beq.n	8003546 <_printf_i+0x15a>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	079b      	lsls	r3, r3, #30
 80035ee:	d413      	bmi.n	8003618 <_printf_i+0x22c>
 80035f0:	68e0      	ldr	r0, [r4, #12]
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	4298      	cmp	r0, r3
 80035f6:	bfb8      	it	lt
 80035f8:	4618      	movlt	r0, r3
 80035fa:	e7a6      	b.n	800354a <_printf_i+0x15e>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4632      	mov	r2, r6
 8003600:	4649      	mov	r1, r9
 8003602:	4640      	mov	r0, r8
 8003604:	47d0      	blx	sl
 8003606:	3001      	adds	r0, #1
 8003608:	d09d      	beq.n	8003546 <_printf_i+0x15a>
 800360a:	3501      	adds	r5, #1
 800360c:	68e3      	ldr	r3, [r4, #12]
 800360e:	9903      	ldr	r1, [sp, #12]
 8003610:	1a5b      	subs	r3, r3, r1
 8003612:	42ab      	cmp	r3, r5
 8003614:	dcf2      	bgt.n	80035fc <_printf_i+0x210>
 8003616:	e7eb      	b.n	80035f0 <_printf_i+0x204>
 8003618:	2500      	movs	r5, #0
 800361a:	f104 0619 	add.w	r6, r4, #25
 800361e:	e7f5      	b.n	800360c <_printf_i+0x220>
 8003620:	080037ad 	.word	0x080037ad
 8003624:	080037be 	.word	0x080037be

08003628 <memmove>:
 8003628:	4288      	cmp	r0, r1
 800362a:	b510      	push	{r4, lr}
 800362c:	eb01 0402 	add.w	r4, r1, r2
 8003630:	d902      	bls.n	8003638 <memmove+0x10>
 8003632:	4284      	cmp	r4, r0
 8003634:	4623      	mov	r3, r4
 8003636:	d807      	bhi.n	8003648 <memmove+0x20>
 8003638:	1e43      	subs	r3, r0, #1
 800363a:	42a1      	cmp	r1, r4
 800363c:	d008      	beq.n	8003650 <memmove+0x28>
 800363e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003646:	e7f8      	b.n	800363a <memmove+0x12>
 8003648:	4402      	add	r2, r0
 800364a:	4601      	mov	r1, r0
 800364c:	428a      	cmp	r2, r1
 800364e:	d100      	bne.n	8003652 <memmove+0x2a>
 8003650:	bd10      	pop	{r4, pc}
 8003652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800365a:	e7f7      	b.n	800364c <memmove+0x24>

0800365c <_sbrk_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4d06      	ldr	r5, [pc, #24]	@ (8003678 <_sbrk_r+0x1c>)
 8003660:	2300      	movs	r3, #0
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	f7ff fb26 	bl	8002cb8 <_sbrk>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d102      	bne.n	8003676 <_sbrk_r+0x1a>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	b103      	cbz	r3, 8003676 <_sbrk_r+0x1a>
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	20000240 	.word	0x20000240

0800367c <memcpy>:
 800367c:	440a      	add	r2, r1
 800367e:	4291      	cmp	r1, r2
 8003680:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003684:	d100      	bne.n	8003688 <memcpy+0xc>
 8003686:	4770      	bx	lr
 8003688:	b510      	push	{r4, lr}
 800368a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800368e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003692:	4291      	cmp	r1, r2
 8003694:	d1f9      	bne.n	800368a <memcpy+0xe>
 8003696:	bd10      	pop	{r4, pc}

08003698 <_realloc_r>:
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	4607      	mov	r7, r0
 800369e:	4614      	mov	r4, r2
 80036a0:	460d      	mov	r5, r1
 80036a2:	b921      	cbnz	r1, 80036ae <_realloc_r+0x16>
 80036a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036a8:	4611      	mov	r1, r2
 80036aa:	f7ff bc4d 	b.w	8002f48 <_malloc_r>
 80036ae:	b92a      	cbnz	r2, 80036bc <_realloc_r+0x24>
 80036b0:	f7ff fbde 	bl	8002e70 <_free_r>
 80036b4:	4625      	mov	r5, r4
 80036b6:	4628      	mov	r0, r5
 80036b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036bc:	f000 f81a 	bl	80036f4 <_malloc_usable_size_r>
 80036c0:	4284      	cmp	r4, r0
 80036c2:	4606      	mov	r6, r0
 80036c4:	d802      	bhi.n	80036cc <_realloc_r+0x34>
 80036c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036ca:	d8f4      	bhi.n	80036b6 <_realloc_r+0x1e>
 80036cc:	4621      	mov	r1, r4
 80036ce:	4638      	mov	r0, r7
 80036d0:	f7ff fc3a 	bl	8002f48 <_malloc_r>
 80036d4:	4680      	mov	r8, r0
 80036d6:	b908      	cbnz	r0, 80036dc <_realloc_r+0x44>
 80036d8:	4645      	mov	r5, r8
 80036da:	e7ec      	b.n	80036b6 <_realloc_r+0x1e>
 80036dc:	42b4      	cmp	r4, r6
 80036de:	4622      	mov	r2, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	bf28      	it	cs
 80036e4:	4632      	movcs	r2, r6
 80036e6:	f7ff ffc9 	bl	800367c <memcpy>
 80036ea:	4629      	mov	r1, r5
 80036ec:	4638      	mov	r0, r7
 80036ee:	f7ff fbbf 	bl	8002e70 <_free_r>
 80036f2:	e7f1      	b.n	80036d8 <_realloc_r+0x40>

080036f4 <_malloc_usable_size_r>:
 80036f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f8:	1f18      	subs	r0, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bfbc      	itt	lt
 80036fe:	580b      	ldrlt	r3, [r1, r0]
 8003700:	18c0      	addlt	r0, r0, r3
 8003702:	4770      	bx	lr

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
